// Laise Aquino, April 2015
// Basic Linux shell created as part of an Operating Systems course

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>
#include <signal.h>
#include <unistd.h>


/*************** Definições e declarações ***************/

#define BUFFERSIZE 255
#define pipe_symb 0
#define maior 1
#define menor 2
#define maiormaior 3
#define doismaior 4

extern int errno;

// Estrutura global que controla os processos
typedef struct{
    int ID, estado;             // 1-executando 0-parado
    char nome[BUFFERSIZE];
} processList;

processList* pList[BUFFERSIZE];         // lista onde cada índice e um processo
char command[BUFFERSIZE];               // vetor que guarda o comando do usuário
char* comMatrix[BUFFERSIZE][BUFFERSIZE];// matriz de comandos do pipe
pid_t pID;                              // pID do processo atual


/*************** Funções para controle dos Pipes ***************/

// Limpa buffer da matriz de comandos
void cleanCommandPipe(char *commandPipe[][BUFFERSIZE])
{
    int i;
    for(i=0;i<BUFFERSIZE;i++)
        memset(commandPipe, '\0', BUFFERSIZE);
}

// Trata comando com redirecionamento
void executePipe(int total_comandos, int simbolos_red[])
{
    FILE *file; // destino da saída / origem da entrada
    char aux_c;
    int fd[2];
    pid_t id;

    // Inicializa o pipe
    pipe(fd);
    id = fork();

    // erro
    if(id == -1) {
        printf("Erro ao criar pipes.\n errno: %d\n", errno);
    }

    // estou no processo filho
    else if(id == 0) {
        close(1); // fecha stdout dele, redireciona e fecha arquivo original
        dup2(fd[1],1);
        close(fd[1]);

        if(total_comandos > 2) {
            total_comandos--;
            executePipe(total_comandos, simbolos_red);
        } else { // execução só ocorre nos dois últimos comandos
                 // trata cada tipo de redirecionamento, verificando
                 // os símbolos da esquerda para a direita
            switch(simbolos_red[total_comandos-2]) {
                case menor: // entrada padrão será o arquivo
                    file = fopen(comMatrix[total_comandos-2][0], "r"); // lê a primeira? linha da matriz - o nome            !!!!!!!!
                    while ( (aux_c = fgetc(file)) != EOF ) {           // do arquivo - e escreve ele no comando
                        printf("%c", aux_c); // em stdout
                    }
                    fclose(file);
                    exit(0);
                    break;
                default: // para os outros três casos
                    if(execvp(comMatrix[total_comandos-2][0], comMatrix[total_comandos-2]) < 0) {
                        printf("Comando nao encontrado.\n"); // tenta executar o comando no filho
                        exit(0);                             // retorna no pai o pid do filho se tiver sucesso, e 0 no filho
                    }
            }
        }
    }

    // estou no processo pai
    else {
        close(0);
        dup2(fd[0],0); // fecha stdin dele, redireciona e fecha arquivo original
        close(fd[1]);
        switch(simbolos_red[total_comandos-2]) {

            case maior:
                file = fopen(comMatrix[total_comandos-1][0], "w");
		dup2(fileno(file),1);//
		/*while ((aux_c = fgetc(stdin)) != EOF){
                    fprintf(file, "%c", aux_c);
                }
                fclose(file);*/
                exit(0);
            break;

            case maiormaior:
            	file = fopen(comMatrix[total_comandos-1][0], "a");
				while ((aux_c = fgetc(stdin)) != EOF){
					fprintf(file, "%c", aux_c);
				}
				fclose(file);
				exit(0);
            break;

	    case doismaior:
                file = fopen(comMatrix[total_comandos-1][0], "w");
                while ((aux_c = fgetc(stderr)) != EOF){
                    fprintf(file, "%c", aux_c);
                }
                fclose(file);
                exit(0);

            break;

            default:
				if(execvp(comMatrix[total_comandos-1][0], comMatrix[total_comandos-1]) < 0){
					printf("Comando não encontrado.\n");
					exit(0);
				}
            break;
        }
    }
}


// Verifica se há redirecionamento no comando
int verifyRedir(char param[])
{
	if(strcmp(param, "|") == 0){
		return pipe_symb;
	}else if(strcmp(param, ">") == 0){
		return maior;
	}else if(strcmp(param, "<") == 0){
		return menor;
	}else if(strcmp(param, ">>") == 0){
		return maiormaior;
	}else if(strcmp(param, "2>") == 0){
		return doismaior;
	}else return -1; // não foi encontrado comando de redirecionamento
}


/*************** Funcões para execução de comandos básicos ***************/


// Limpa buffer do comando
void cleanCommand(char *command)
{
    memset(command, '\0', BUFFERSIZE);
}

// Leitura da entrada do usuário no vetor command
void getUserInput(char *command)
{
    char input = '\0';
    int i=0;
    cleanCommand(command);
    input = getchar();

    while(input != '\n') { // a leitura ocorre até o fim da linha
        command[i] = input;
        input = getchar();
        i++;
    }
}

// Preenche parâmetros do argv
void fillArgv(char *command, char *newArgv[])
{
    char* token = malloc(BUFFERSIZE);
    int i=0, aux;
    char* aux_string;

    aux_string = strtok(command," "); // token é a entrada até o primeiro espaço
    aux = strlen(aux_string);         // inicialmente é o próprio comando
    strncpy(token,aux_string,aux);

    newArgv[i] = malloc(BUFFERSIZE);
    strcpy(newArgv[i],token);
    i++;

    while((token=strtok(NULL," ")) != NULL) { // enquanto houver outros tokens
        newArgv[i] = malloc(BUFFERSIZE);      // insere elementos em newArgv[]
        strcpy(newArgv[i],token);
        i++;
    }
}

// Limpa newArgv
void cleanArgv(char *newArgv[])
{
    int i;
    for(i=0; i<BUFFERSIZE; i++){
        newArgv[i] = NULL;
    }
}


void executeFromChild(char* command, char *newArgv[])
{
    int i = 0, total_comandos = 0,  total_parametros = 0;
	int simbolos_red[BUFFERSIZE];
	int par; //irá procurar por parâmetros


	cleanCommandPipe(comMatrix);
    while(newArgv[i] != NULL){
		par = verifyRedir(newArgv[i]);
		if(par < 0){ // não há param de redirecionamento
			comMatrix[total_comandos][total_parametros] = malloc(BUFFERSIZE);
			strcpy(comMatrix[total_comandos][total_parametros], newArgv[i]);
			total_parametros++;
		} else if(newArgv[i+1] != NULL){   // se tiver mesmo pipes, verifica se é o último dos comandos
			simbolos_red[total_comandos] = par;
			total_comandos++;
			total_parametros = 0;
		}else{
			printf("Erro ao construir o pipe.\n");
		}
		i++;
	}

    // execução normal sem redirecionamento
    if(total_comandos == 0) {
        if(execvp(command, newArgv) < 0) {   // tenta executar o comando
            printf("Comando nao encontrado. \n");
            exit(0);
        }
       // a espera do pai ou não é tratada depois, dependendo do tipo de execução
    } else
    // execução com redirecionamento
    total_comandos++;
	executePipe(total_comandos, simbolos_red);
}


/*************** Funcões para gerenciamento de jobs ***************/


// Adiciona e/ou retorna posicao de um processo na lista
int addProcess(processList* pList[], char* command, int pid, int state)
{
    int i=0;

    // Verifica se o processo ja existe na lista
    for(i=0; i++; i<BUFFERSIZE){
        if(pList[i] != NULL)
            if(pid == pList[i]->ID)
                return i;          // se encontrar, retorna seu índice
    }

    // Procura proxima posicao livre na lista
    i=0;
    while(pList[i] != NULL)
        i++;

    // Coloca novo processo na posicao livre
    pList[i] = malloc(sizeof(processList));
    pList[i]->ID = pid;
    pList[i]->estado = state;
    strcpy(pList[i]->nome, command);

    return i;
}

// Atualiza estado dos processos
void updateStatus(processList* pList[])
{
    int i;
    int status=-1;                      // guarda informações sobre um processo filho - status iniciado em -1 inicialmente

    for(i=0; i<BUFFERSIZE; i++){        // percorre lista de processos
        if(pList[i] != NULL){
            // suspende execução do pai somente se o estado de um filho que terminou estiver disponível
            // continua se nenhum processo filho terminou
            waitpid(pList[i]->ID, &status, WNOHANG);

            // processos terminados sao removidos
            if(WIFEXITED(status)){      // retorna true se o filho terminou normalmente
                printf("[%d]   Encerrado       \t      %s\n", i, pList[i]->nome);
                pList[i] = NULL;
                free(pList[i]);
                status=-1;              // reseta estado
            }
        }
    }
}

// Verifica execucao em background: Sim(1) ou Não(0)
int verifyBgJob(char *newArgv[])
{
    int i=0;

    while(newArgv[i] != NULL)           // encontra o ultimo parametro
        i++;
    if(strcmp(newArgv[i-1], "&") == 0){ // se houver "&" no fim do comando,
        newArgv[i-1] = NULL;            // "conserta" o comando para posterior
        return 1;                       // interpretação
    }
    return 0;
}

// Gerenciamento dos comandos especiais de jobs
int jobManage(char* command)
{
    if(strcmp(command, "jobs") == 0){
		return 1;
	} else if((strcmp(command, "bg") == 0)){
		return 2;
	} else if((strcmp(command, "fg") == 0)){
		return 3;
	} else if((strcmp(command, "quit") == 0)){
		return 4;
	}
	return 0;
}

// Lista os processos em execução ou parados
void functionJobs(processList* pList[])
{
    int i, status;

    for(i=0;i<BUFFERSIZE;i++){ // percorre lista de processos imprimindo seus estados
        if(pList[i] != NULL){
            if(pList[i]->estado == 1)
                printf("[%d]   Executando       \t      %s\n", i, pList[i]->nome);
            else if(pList[i]->estado == 0)
                printf("[%d]   Parado       \t      %s\n", i, pList[i]->nome);
        }
        status=-1;
    }
}



/*************** Funcões para alternar estados de execução ***************/


// Handler de sinal CtrlC
void sigint()
{
        kill(pID,SIGKILL); // nunca será o pid do pai ou de processos em bg
	printf("\n");
}


// Handler de sinal CtrlZ
void sigstop(){
	int i, status;
	i = addProcess(pList, command, pID, 0); // adiciona na lista como processo parado
        kill(pList[i]->ID,SIGSTOP);
	printf("\n[%d]   Parado       \t      %s\n", i, pList[i]->nome);
}


// Alterna para execução em background
void functionBg(processList* pList[], char *newArgv[])
{
    int i, status, auxint, found=0;
    char auxstr[BUFFERSIZE];
    strcpy(auxstr,newArgv[1]);     // para verificar se há %
    auxint = strtol(auxstr,NULL,0);// para procurar por pid

    // Verifica se entrou com pID - bg pid
    if(newArgv[2] == NULL && auxstr[0] != '%'){
	for(i=0;i<BUFFERSIZE;i++)
            if(pList[i] != NULL)
                if(pList[i]->ID == auxint){
		    found=1;
		    if(pList[i]->estado == 1)
			printf("Job ja esta executando em background.\n");
	    	    else{
		        printf("[%d] %s &\n", i, pList[i]->nome);
		        kill(pList[i]->ID,SIGCONT);
		        pList[i]->estado = 1;
		    }
		}
	if(found == 0) printf("Job nao existe.\n");
    }

    // Verifica se entrou com jID - bg %jid
    else if(newArgv[2] == NULL && strlen(newArgv[1]) == 2){// só para jid de 0 a 9
        i = (atoi(&auxstr[1]));
        if(pList[i] != NULL && auxstr[0] == '%'){
	    if(pList[i]->estado == 1)
		printf("Job ja esta executando em background.\n");
	    else{
	        printf("[%d] %s &\n", i, pList[i]->nome);      // se existe um processo na lista com
                kill(pList[i]->ID,SIGCONT);                // o JID especifiado, manda sinal para
                pList[i]->estado = 1;                      // ele retomar sua execução, em background
	    }
        } else printf("Job nao existe.\n");
    }

    memset(auxstr, '\0', BUFFERSIZE);
}


// Alterna para execucao em foreground
void functionFg(processList* pList[], char *newArgv[])
{
    int i, status, auxint, found=0;
    char auxstr[BUFFERSIZE];
    strcpy(auxstr,newArgv[1]);     // para verificar se há %
    auxint = strtol(auxstr,NULL,0);// para procurar por pid

    // Verifica se entrou com pID - fg pid
    if(newArgv[2] == NULL && auxstr[0] != '%'){
	for(i=0;i<BUFFERSIZE;i++)
            if(pList[i] != NULL)
                if(pList[i]->ID == auxint){
		    found=1;
		    strcpy(command, pList[i]->nome);
		    pID = pList[i]->ID;
		    printf("%s\n", pList[i]->nome);
		    pList[i] = NULL;
                    free(pList[i]);
		    signal(SIGTSTP,&sigstop);
		    signal(SIGINT,&sigint);
		    kill(pID,SIGCONT);
		    waitpid(pID,&status,WUNTRACED);
		    signal(SIGINT,SIG_IGN);
		    signal(SIGTSTP,SIG_IGN);
		}
	if(found == 0) printf("Job nao existe.\n");
    }


    // Verifica se entrou com jID - fg %jid
    else if(newArgv[2] == NULL && strlen(newArgv[1]) == 2){
        i = (atoi(&auxstr[1]));
        if(pList[i] != NULL && auxstr[0] == '%'){
	    strcpy(command, pList[i]->nome);
	    pID = pList[i]->ID;
	    printf("%s\n", pList[i]->nome);
	    pList[i] = NULL;		      // remove da lista
            free(pList[i]);
	    signal(SIGTSTP,&sigstop);     // habilita interrupções, já que só retorna ao pai normalmente se filhos acabarem
	    signal(SIGINT,&sigint);
	    kill(pID,SIGCONT);              // envia sinal para continuar execução
	    waitpid(pID,&status,WUNTRACED); // retorna estado de processos filhos que estão parados
	    signal(SIGINT,SIG_IGN);         // ignora subsequentes
	    signal(SIGTSTP,SIG_IGN);
        } else printf("Job nao existe.\n");
    }

    memset(auxstr, '\0', BUFFERSIZE);
}


void killProcesses(processList* pList[], char *newArgv[])
{
    int i;
    for(i=0;i<BUFFERSIZE;i++){
	if(pList[i] != NULL)
	    kill(pList[i]->ID,SIGKILL);
	    pList[i] = NULL;
            free(pList[i]);
    }
}


/*************** Função principal ***************/


int main(int argc, char *argv[])
{
    int i=0, status, bg_exec, bg_op, jID;
    char *newArgv[BUFFERSIZE];
    char aux[BUFFERSIZE];

    // controle de diretório
    getcwd(aux,BUFFERSIZE);

    // ignora ctrl+C e ctrl+Z
    signal (SIGTSTP, SIG_IGN);
    signal (SIGINT, SIG_IGN);

    printf("G7> ");

    while(1) {

	fflush(stdin);

	cleanCommandPipe(comMatrix);
	cleanCommand(command);     //limpa a string de comando
        cleanArgv(newArgv);    //limpa as strings de argv

        getUserInput(command); // lê comando
        updateStatus(pList);   // em caso de alterações de estado (algum job encerrou)


        if(command[0] != '\0'){     // se houver de fato uma entrada

        // verificação do comando "cd"
	    if(command[0] == 'c' && command[1] == 'd' && command[2] == ' '){
		if(command[3] == '\0'){     // caso "cd " - volta para diretório inicial
		    chdir(aux);
		    printf("G7> ");
		    continue;
		}

		else if(chdir(command+3) < 0)       // tenta mudar para o diretório especificado no comando
		    printf("Erro na mudanca de diretorio: %s\n", strerror(errno));

		printf("G7> ");
		continue;
	    }

            fillArgv(command, newArgv);       // preeche newArgv com o comando
            bg_op = jobManage(command);       // verificação de comandos especiais
            bg_exec = verifyBgJob(newArgv);   // verificação de execução em background

            switch(bg_op){ // verifica comando de manip. de jobs
                case 1: // jobs
                    functionJobs(pList);
                    break;
                case 2: // bg
                    if(newArgv[1] != NULL) functionBg(pList,newArgv);
                    break;
                case 3: // fg
                    if(newArgv[1] != NULL) functionFg(pList,newArgv);
                    break;
		case 4: // quit
		    killProcesses(pList,newArgv); // não deixa processos zumbis ao fim do progragam
		    return 0;

                default: // para comando normal

		    pID = fork();            // cria processo filho, que será o processo corrente
		    if(pID == -1)
		        printf("Erro ao criar processo filho.\n errno: %d\n", errno);
		    else if(pID == 0)        // programa entra no processo filho
                executeFromChild(command, newArgv);
		    else{		             // programa continua no pai, filho com id pID

                        switch(bg_exec){ // verifica execucao em background
                            case 1:
                                jID = addProcess(pList,command,pID,1); // adiciona processo corrente como 'executando'
                                printf("[%d] %d\n", jID, pID);
                                break;
                            default: // para execucao normal, em foreground - pai deve esperar o filho terminar ou interromper
                                signal(SIGINT,&sigint);         // habilita interrupções
                                signal(SIGTSTP,&sigstop);       // (CtrlC e CtrlZ)

				waitpid(pID,&status,WUNTRACED); // retorna estado de processos filhos que estão parados
								// apenas quando acabarem
                                signal(SIGINT,SIG_IGN);         // ignora subsequentes
                                signal(SIGTSTP,SIG_IGN);
                                break;
                        }
		    }

                break;
            }
        }


        printf("G7> ");

    }

    free(command);
    cleanArgv(newArgv);

    return 0;
}
